{"version":3,"sources":["@wordpress/blocks/src/api/registration.js"],"names":["camelCase","select","dispatch","_x","BLOCK_ICON_DEFAULT","store","blocksStore","serverSideBlockDefinitions","isObject","object","unstable__bootstrapServerSideBlockDefinitions","definitions","blockName","Object","keys","apiVersion","undefined","ancestor","fromEntries","entries","filter","value","map","key","getBlockSettingsFromMetadata","textdomain","metadata","allowedFields","settings","includes","i18nBlockSchema","forEach","translateBlockSettingUsingI18nSchema","registerBlockType","blockNameOrMetadata","name","console","error","test","getBlockType","blockType","icon","keywords","attributes","providesContext","usesContext","supports","styles","variations","save","__experimentalRegisterBlockType","i18nSchema","settingValue","Array","isArray","length","reduce","accumulator","registerBlockCollection","namespace","title","addBlockCollection","unregisterBlockCollection","removeBlockCollection","unregisterBlockType","oldBlock","removeBlockTypes","setFreeformContentHandlerName","setFreeformFallbackBlockName","getFreeformContentHandlerName","getFreeformFallbackBlockName","getGroupingBlockName","setUnregisteredTypeHandlerName","setUnregisteredFallbackBlockName","getUnregisteredTypeHandlerName","getUnregisteredFallbackBlockName","setDefaultBlockName","setGroupingBlockName","getDefaultBlockName","getBlockTypes","getBlockSupport","nameOrType","feature","defaultSupports","hasBlockSupport","isReusableBlock","blockOrType","isTemplatePart","getChildBlockNames","hasChildBlocks","hasChildBlocksWithInserterSupport","registerBlockStyle","styleVariation","addBlockStyles","unregisterBlockStyle","styleVariationName","removeBlockStyles","getBlockVariations","scope","registerBlockVariation","variation","addBlockVariations","unregisterBlockVariation","variationName","removeBlockVariations"],"mappings":"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","sourcesContent":["/* eslint no-console: [ 'error', { allow: [ 'error', 'warn' ] } ] */\n\n/**\n * External dependencies\n */\nimport { camelCase } from 'change-case';\n\n/**\n * WordPress dependencies\n */\nimport { select, dispatch } from '@wordpress/data';\nimport { _x } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport i18nBlockSchema from './i18n-block.json';\nimport { BLOCK_ICON_DEFAULT } from './constants';\nimport { store as blocksStore } from '../store';\n\n/**\n * An icon type definition. One of a Dashicon slug, an element,\n * or a component.\n *\n * @typedef {(string|WPElement|WPComponent)} WPIcon\n *\n * @see https://developer.wordpress.org/resource/dashicons/\n */\n\n/**\n * Render behavior of a block type icon; one of a Dashicon slug, an element,\n * or a component.\n *\n * @typedef {WPIcon} WPBlockTypeIconRender\n */\n\n/**\n * An object describing a normalized block type icon.\n *\n * @typedef {Object} WPBlockTypeIconDescriptor\n *\n * @property {WPBlockTypeIconRender} src         Render behavior of the icon,\n *                                               one of a Dashicon slug, an\n *                                               element, or a component.\n * @property {string}                background  Optimal background hex string\n *                                               color when displaying icon.\n * @property {string}                foreground  Optimal foreground hex string\n *                                               color when displaying icon.\n * @property {string}                shadowColor Optimal shadow hex string\n *                                               color when displaying icon.\n */\n\n/**\n * Value to use to render the icon for a block type in an editor interface,\n * either a Dashicon slug, an element, a component, or an object describing\n * the icon.\n *\n * @typedef {(WPBlockTypeIconDescriptor|WPBlockTypeIconRender)} WPBlockTypeIcon\n */\n\n/**\n * Named block variation scopes.\n *\n * @typedef {'block'|'inserter'|'transform'} WPBlockVariationScope\n */\n\n/**\n * An object describing a variation defined for the block type.\n *\n * @typedef {Object} WPBlockVariation\n *\n * @property {string}                  name          The unique and machine-readable name.\n * @property {string}                  title         A human-readable variation title.\n * @property {string}                  [description] A detailed variation description.\n * @property {string}                  [category]    Block type category classification,\n *                                                   used in search interfaces to arrange\n *                                                   block types by category.\n * @property {WPIcon}                  [icon]        An icon helping to visualize the variation.\n * @property {boolean}                 [isDefault]   Indicates whether the current variation is\n *                                                   the default one. Defaults to `false`.\n * @property {Object}                  [attributes]  Values which override block attributes.\n * @property {Array[]}                 [innerBlocks] Initial configuration of nested blocks.\n * @property {Object}                  [example]     Example provides structured data for\n *                                                   the block preview. You can set to\n *                                                   `undefined` to disable the preview shown\n *                                                   for the block type.\n * @property {WPBlockVariationScope[]} [scope]       The list of scopes where the variation\n *                                                   is applicable. When not provided, it\n *                                                   assumes all available scopes.\n * @property {string[]}                [keywords]    An array of terms (which can be translated)\n *                                                   that help users discover the variation\n *                                                   while searching.\n * @property {Function|string[]}       [isActive]    This can be a function or an array of block attributes.\n *                                                   Function that accepts a block's attributes and the\n *                                                   variation's attributes and determines if a variation is active.\n *                                                   This function doesn't try to find a match dynamically based\n *                                                   on all block's attributes, as in many cases some attributes are irrelevant.\n *                                                   An example would be for `embed` block where we only care\n *                                                   about `providerNameSlug` attribute's value.\n *                                                   We can also use a `string[]` to tell which attributes\n *                                                   should be compared as a shorthand. Each attributes will\n *                                                   be matched and the variation will be active if all of them are matching.\n */\n\n/**\n * Defined behavior of a block type.\n *\n * @typedef {Object} WPBlockType\n *\n * @property {string}             name          Block type's namespaced name.\n * @property {string}             title         Human-readable block type label.\n * @property {string}             [description] A detailed block type description.\n * @property {string}             [category]    Block type category classification,\n *                                              used in search interfaces to arrange\n *                                              block types by category.\n * @property {WPBlockTypeIcon}    [icon]        Block type icon.\n * @property {string[]}           [keywords]    Additional keywords to produce block\n *                                              type as result in search interfaces.\n * @property {Object}             [attributes]  Block type attributes.\n * @property {WPComponent}        [save]        Optional component describing\n *                                              serialized markup structure of a\n *                                              block type.\n * @property {WPComponent}        edit          Component rendering an element to\n *                                              manipulate the attributes of a block\n *                                              in the context of an editor.\n * @property {WPBlockVariation[]} [variations]  The list of block variations.\n * @property {Object}             [example]     Example provides structured data for\n *                                              the block preview. When not defined\n *                                              then no preview is shown.\n */\n\nexport const serverSideBlockDefinitions = {};\n\nfunction isObject( object ) {\n\treturn object !== null && typeof object === 'object';\n}\n\n/**\n * Sets the server side block definition of blocks.\n *\n * @param {Object} definitions Server-side block definitions\n */\n// eslint-disable-next-line camelcase\nexport function unstable__bootstrapServerSideBlockDefinitions( definitions ) {\n\tfor ( const blockName of Object.keys( definitions ) ) {\n\t\t// Don't overwrite if already set. It covers the case when metadata\n\t\t// was initialized from the server.\n\t\tif ( serverSideBlockDefinitions[ blockName ] ) {\n\t\t\t// We still need to polyfill `apiVersion` for WordPress version\n\t\t\t// lower than 5.7. If it isn't present in the definition shared\n\t\t\t// from the server, we try to fallback to the definition passed.\n\t\t\t// @see https://github.com/WordPress/gutenberg/pull/29279\n\t\t\tif (\n\t\t\t\tserverSideBlockDefinitions[ blockName ].apiVersion ===\n\t\t\t\t\tundefined &&\n\t\t\t\tdefinitions[ blockName ].apiVersion\n\t\t\t) {\n\t\t\t\tserverSideBlockDefinitions[ blockName ].apiVersion =\n\t\t\t\t\tdefinitions[ blockName ].apiVersion;\n\t\t\t}\n\t\t\t// The `ancestor` prop is not included in the definitions shared\n\t\t\t// from the server yet, so it needs to be polyfilled as well.\n\t\t\t// @see https://github.com/WordPress/gutenberg/pull/39894\n\t\t\tif (\n\t\t\t\tserverSideBlockDefinitions[ blockName ].ancestor ===\n\t\t\t\t\tundefined &&\n\t\t\t\tdefinitions[ blockName ].ancestor\n\t\t\t) {\n\t\t\t\tserverSideBlockDefinitions[ blockName ].ancestor =\n\t\t\t\t\tdefinitions[ blockName ].ancestor;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tserverSideBlockDefinitions[ blockName ] = Object.fromEntries(\n\t\t\tObject.entries( definitions[ blockName ] )\n\t\t\t\t.filter(\n\t\t\t\t\t( [ , value ] ) => value !== null && value !== undefined\n\t\t\t\t)\n\t\t\t\t.map( ( [ key, value ] ) => [ camelCase( key ), value ] )\n\t\t);\n\t}\n}\n\n/**\n * Gets block settings from metadata loaded from `block.json` file.\n *\n * @param {Object} metadata            Block metadata loaded from `block.json`.\n * @param {string} metadata.textdomain Textdomain to use with translations.\n *\n * @return {Object} Block settings.\n */\nfunction getBlockSettingsFromMetadata( { textdomain, ...metadata } ) {\n\tconst allowedFields = [\n\t\t'apiVersion',\n\t\t'title',\n\t\t'category',\n\t\t'parent',\n\t\t'ancestor',\n\t\t'icon',\n\t\t'description',\n\t\t'keywords',\n\t\t'attributes',\n\t\t'providesContext',\n\t\t'usesContext',\n\t\t'supports',\n\t\t'styles',\n\t\t'example',\n\t\t'variations',\n\t];\n\n\tconst settings = Object.fromEntries(\n\t\tObject.entries( metadata ).filter( ( [ key ] ) =>\n\t\t\tallowedFields.includes( key )\n\t\t)\n\t);\n\n\tif ( textdomain ) {\n\t\tObject.keys( i18nBlockSchema ).forEach( ( key ) => {\n\t\t\tif ( ! settings[ key ] ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsettings[ key ] = translateBlockSettingUsingI18nSchema(\n\t\t\t\ti18nBlockSchema[ key ],\n\t\t\t\tsettings[ key ],\n\t\t\t\ttextdomain\n\t\t\t);\n\t\t} );\n\t}\n\n\treturn settings;\n}\n\n/**\n * Registers a new block provided a unique name and an object defining its\n * behavior. Once registered, the block is made available as an option to any\n * editor interface where blocks are implemented.\n *\n * For more in-depth information on registering a custom block see the [Create a block tutorial](docs/how-to-guides/block-tutorial/README.md)\n *\n * @param {string|Object} blockNameOrMetadata Block type name or its metadata.\n * @param {Object}        settings            Block settings.\n *\n * @example\n * ```js\n * import { __ } from '@wordpress/i18n';\n * import { registerBlockType } from '@wordpress/blocks'\n *\n * registerBlockType( 'namespace/block-name', {\n *     title: __( 'My First Block' ),\n *     edit: () => <div>{ __( 'Hello from the editor!' ) }</div>,\n *     save: () => <div>Hello from the saved content!</div>,\n * } );\n * ```\n *\n * @return {?WPBlockType} The block, if it has been successfully registered;\n *                    otherwise `undefined`.\n */\nexport function registerBlockType( blockNameOrMetadata, settings ) {\n\tconst name = isObject( blockNameOrMetadata )\n\t\t? blockNameOrMetadata.name\n\t\t: blockNameOrMetadata;\n\n\tif ( typeof name !== 'string' ) {\n\t\tconsole.error( 'Block names must be strings.' );\n\t\treturn;\n\t}\n\n\tif ( ! /^[a-z][a-z0-9-]*\\/[a-z][a-z0-9-]*$/.test( name ) ) {\n\t\tconsole.error(\n\t\t\t'Block names must contain a namespace prefix, include only lowercase alphanumeric characters or dashes, and start with a letter. Example: my-plugin/my-custom-block'\n\t\t);\n\t\treturn;\n\t}\n\tif ( select( blocksStore ).getBlockType( name ) ) {\n\t\tconsole.error( 'Block \"' + name + '\" is already registered.' );\n\t\treturn;\n\t}\n\n\tif ( isObject( blockNameOrMetadata ) ) {\n\t\tunstable__bootstrapServerSideBlockDefinitions( {\n\t\t\t[ name ]: getBlockSettingsFromMetadata( blockNameOrMetadata ),\n\t\t} );\n\t}\n\n\tconst blockType = {\n\t\tname,\n\t\ticon: BLOCK_ICON_DEFAULT,\n\t\tkeywords: [],\n\t\tattributes: {},\n\t\tprovidesContext: {},\n\t\tusesContext: [],\n\t\tsupports: {},\n\t\tstyles: [],\n\t\tvariations: [],\n\t\tsave: () => null,\n\t\t...serverSideBlockDefinitions?.[ name ],\n\t\t...settings,\n\t};\n\n\tdispatch( blocksStore ).__experimentalRegisterBlockType( blockType );\n\n\treturn select( blocksStore ).getBlockType( name );\n}\n\n/**\n * Translates block settings provided with metadata using the i18n schema.\n *\n * @param {string|string[]|Object[]} i18nSchema   I18n schema for the block setting.\n * @param {string|string[]|Object[]} settingValue Value for the block setting.\n * @param {string}                   textdomain   Textdomain to use with translations.\n *\n * @return {string|string[]|Object[]} Translated setting.\n */\nfunction translateBlockSettingUsingI18nSchema(\n\ti18nSchema,\n\tsettingValue,\n\ttextdomain\n) {\n\tif ( typeof i18nSchema === 'string' && typeof settingValue === 'string' ) {\n\t\t// eslint-disable-next-line @wordpress/i18n-no-variables, @wordpress/i18n-text-domain\n\t\treturn _x( settingValue, i18nSchema, textdomain );\n\t}\n\tif (\n\t\tArray.isArray( i18nSchema ) &&\n\t\ti18nSchema.length &&\n\t\tArray.isArray( settingValue )\n\t) {\n\t\treturn settingValue.map( ( value ) =>\n\t\t\ttranslateBlockSettingUsingI18nSchema(\n\t\t\t\ti18nSchema[ 0 ],\n\t\t\t\tvalue,\n\t\t\t\ttextdomain\n\t\t\t)\n\t\t);\n\t}\n\tif (\n\t\tisObject( i18nSchema ) &&\n\t\tObject.entries( i18nSchema ).length &&\n\t\tisObject( settingValue )\n\t) {\n\t\treturn Object.keys( settingValue ).reduce( ( accumulator, key ) => {\n\t\t\tif ( ! i18nSchema[ key ] ) {\n\t\t\t\taccumulator[ key ] = settingValue[ key ];\n\t\t\t\treturn accumulator;\n\t\t\t}\n\t\t\taccumulator[ key ] = translateBlockSettingUsingI18nSchema(\n\t\t\t\ti18nSchema[ key ],\n\t\t\t\tsettingValue[ key ],\n\t\t\t\ttextdomain\n\t\t\t);\n\t\t\treturn accumulator;\n\t\t}, {} );\n\t}\n\treturn settingValue;\n}\n\n/**\n * Registers a new block collection to group blocks in the same namespace in the inserter.\n *\n * @param {string} namespace       The namespace to group blocks by in the inserter; corresponds to the block namespace.\n * @param {Object} settings        The block collection settings.\n * @param {string} settings.title  The title to display in the block inserter.\n * @param {Object} [settings.icon] The icon to display in the block inserter.\n *\n * @example\n * ```js\n * import { __ } from '@wordpress/i18n';\n * import { registerBlockCollection, registerBlockType } from '@wordpress/blocks';\n *\n * // Register the collection.\n * registerBlockCollection( 'my-collection', {\n *     title: __( 'Custom Collection' ),\n * } );\n *\n * // Register a block in the same namespace to add it to the collection.\n * registerBlockType( 'my-collection/block-name', {\n *     title: __( 'My First Block' ),\n *     edit: () => <div>{ __( 'Hello from the editor!' ) }</div>,\n *     save: () => <div>'Hello from the saved content!</div>,\n * } );\n * ```\n */\nexport function registerBlockCollection( namespace, { title, icon } ) {\n\tdispatch( blocksStore ).addBlockCollection( namespace, title, icon );\n}\n\n/**\n * Unregisters a block collection\n *\n * @param {string} namespace The namespace to group blocks by in the inserter; corresponds to the block namespace\n *\n * @example\n * ```js\n * import { unregisterBlockCollection } from '@wordpress/blocks';\n *\n * unregisterBlockCollection( 'my-collection' );\n * ```\n */\nexport function unregisterBlockCollection( namespace ) {\n\tdispatch( blocksStore ).removeBlockCollection( namespace );\n}\n\n/**\n * Unregisters a block.\n *\n * @param {string} name Block name.\n *\n * @example\n * ```js\n * import { __ } from '@wordpress/i18n';\n * import { unregisterBlockType } from '@wordpress/blocks';\n *\n * const ExampleComponent = () => {\n *     return (\n *         <Button\n *             onClick={ () =>\n *                 unregisterBlockType( 'my-collection/block-name' )\n *             }\n *         >\n *             { __( 'Unregister my custom block.' ) }\n *         </Button>\n *     );\n * };\n * ```\n *\n * @return {?WPBlockType} The previous block value, if it has been successfully\n *                    unregistered; otherwise `undefined`.\n */\nexport function unregisterBlockType( name ) {\n\tconst oldBlock = select( blocksStore ).getBlockType( name );\n\tif ( ! oldBlock ) {\n\t\tconsole.error( 'Block \"' + name + '\" is not registered.' );\n\t\treturn;\n\t}\n\tdispatch( blocksStore ).removeBlockTypes( name );\n\treturn oldBlock;\n}\n\n/**\n * Assigns name of block for handling non-block content.\n *\n * @param {string} blockName Block name.\n */\nexport function setFreeformContentHandlerName( blockName ) {\n\tdispatch( blocksStore ).setFreeformFallbackBlockName( blockName );\n}\n\n/**\n * Retrieves name of block handling non-block content, or undefined if no\n * handler has been defined.\n *\n * @return {?string} Block name.\n */\nexport function getFreeformContentHandlerName() {\n\treturn select( blocksStore ).getFreeformFallbackBlockName();\n}\n\n/**\n * Retrieves name of block used for handling grouping interactions.\n *\n * @return {?string} Block name.\n */\nexport function getGroupingBlockName() {\n\treturn select( blocksStore ).getGroupingBlockName();\n}\n\n/**\n * Assigns name of block handling unregistered block types.\n *\n * @param {string} blockName Block name.\n */\nexport function setUnregisteredTypeHandlerName( blockName ) {\n\tdispatch( blocksStore ).setUnregisteredFallbackBlockName( blockName );\n}\n\n/**\n * Retrieves name of block handling unregistered block types, or undefined if no\n * handler has been defined.\n *\n * @return {?string} Block name.\n */\nexport function getUnregisteredTypeHandlerName() {\n\treturn select( blocksStore ).getUnregisteredFallbackBlockName();\n}\n\n/**\n * Assigns the default block name.\n *\n * @param {string} name Block name.\n *\n * @example\n * ```js\n * import { setDefaultBlockName } from '@wordpress/blocks';\n *\n * const ExampleComponent = () => {\n *\n *     return (\n *         <Button onClick={ () => setDefaultBlockName( 'core/heading' ) }>\n *             { __( 'Set the default block to Heading' ) }\n *         </Button>\n *     );\n * };\n * ```\n */\nexport function setDefaultBlockName( name ) {\n\tdispatch( blocksStore ).setDefaultBlockName( name );\n}\n\n/**\n * Assigns name of block for handling block grouping interactions.\n *\n * @param {string} name Block name.\n *\n * @example\n * ```js\n * import { setGroupingBlockName } from '@wordpress/blocks';\n *\n * const ExampleComponent = () => {\n *\n *     return (\n *         <Button onClick={ () => setGroupingBlockName( 'core/columns' ) }>\n *             { __( 'Set the default block to Heading' ) }\n *         </Button>\n *     );\n * };\n * ```\n */\nexport function setGroupingBlockName( name ) {\n\tdispatch( blocksStore ).setGroupingBlockName( name );\n}\n\n/**\n * Retrieves the default block name.\n *\n * @return {?string} Block name.\n */\nexport function getDefaultBlockName() {\n\treturn select( blocksStore ).getDefaultBlockName();\n}\n\n/**\n * Returns a registered block type.\n *\n * @param {string} name Block name.\n *\n * @return {?Object} Block type.\n */\nexport function getBlockType( name ) {\n\treturn select( blocksStore )?.getBlockType( name );\n}\n\n/**\n * Returns all registered blocks.\n *\n * @return {Array} Block settings.\n */\nexport function getBlockTypes() {\n\treturn select( blocksStore ).getBlockTypes();\n}\n\n/**\n * Returns the block support value for a feature, if defined.\n *\n * @param {(string|Object)} nameOrType      Block name or type object\n * @param {string}          feature         Feature to retrieve\n * @param {*}               defaultSupports Default value to return if not\n *                                          explicitly defined\n *\n * @return {?*} Block support value\n */\nexport function getBlockSupport( nameOrType, feature, defaultSupports ) {\n\treturn select( blocksStore ).getBlockSupport(\n\t\tnameOrType,\n\t\tfeature,\n\t\tdefaultSupports\n\t);\n}\n\n/**\n * Returns true if the block defines support for a feature, or false otherwise.\n *\n * @param {(string|Object)} nameOrType      Block name or type object.\n * @param {string}          feature         Feature to test.\n * @param {boolean}         defaultSupports Whether feature is supported by\n *                                          default if not explicitly defined.\n *\n * @return {boolean} Whether block supports feature.\n */\nexport function hasBlockSupport( nameOrType, feature, defaultSupports ) {\n\treturn select( blocksStore ).hasBlockSupport(\n\t\tnameOrType,\n\t\tfeature,\n\t\tdefaultSupports\n\t);\n}\n\n/**\n * Determines whether or not the given block is a reusable block. This is a\n * special block type that is used to point to a global block stored via the\n * API.\n *\n * @param {Object} blockOrType Block or Block Type to test.\n *\n * @return {boolean} Whether the given block is a reusable block.\n */\nexport function isReusableBlock( blockOrType ) {\n\treturn blockOrType?.name === 'core/block';\n}\n\n/**\n * Determines whether or not the given block is a template part. This is a\n * special block type that allows composing a page template out of reusable\n * design elements.\n *\n * @param {Object} blockOrType Block or Block Type to test.\n *\n * @return {boolean} Whether the given block is a template part.\n */\nexport function isTemplatePart( blockOrType ) {\n\treturn blockOrType.name === 'core/template-part';\n}\n\n/**\n * Returns an array with the child blocks of a given block.\n *\n * @param {string} blockName Name of block (example: “latest-posts”).\n *\n * @return {Array} Array of child block names.\n */\nexport const getChildBlockNames = ( blockName ) => {\n\treturn select( blocksStore ).getChildBlockNames( blockName );\n};\n\n/**\n * Returns a boolean indicating if a block has child blocks or not.\n *\n * @param {string} blockName Name of block (example: “latest-posts”).\n *\n * @return {boolean} True if a block contains child blocks and false otherwise.\n */\nexport const hasChildBlocks = ( blockName ) => {\n\treturn select( blocksStore ).hasChildBlocks( blockName );\n};\n\n/**\n * Returns a boolean indicating if a block has at least one child block with inserter support.\n *\n * @param {string} blockName Block type name.\n *\n * @return {boolean} True if a block contains at least one child blocks with inserter support\n *                   and false otherwise.\n */\nexport const hasChildBlocksWithInserterSupport = ( blockName ) => {\n\treturn select( blocksStore ).hasChildBlocksWithInserterSupport( blockName );\n};\n\n/**\n * Registers a new block style variation for the given block.\n *\n * For more information on connecting the styles with CSS [the official documentation](/docs/reference-guides/block-api/block-styles.md#styles)\n *\n * @param {string} blockName      Name of block (example: “core/latest-posts”).\n * @param {Object} styleVariation Object containing `name` which is the class name applied to the block and `label` which identifies the variation to the user.\n *\n * @example\n * ```js\n * import { __ } from '@wordpress/i18n';\n * import { registerBlockStyle } from '@wordpress/blocks';\n * import { Button } from '@wordpress/components';\n *\n *\n * const ExampleComponent = () => {\n *     return (\n *         <Button\n *             onClick={ () => {\n *                 registerBlockStyle( 'core/quote', {\n *                     name: 'fancy-quote',\n *                     label: __( 'Fancy Quote' ),\n *                 } );\n *             } }\n *         >\n *             { __( 'Add a new block style for core/quote' ) }\n *         </Button>\n *     );\n * };\n * ```\n */\nexport const registerBlockStyle = ( blockName, styleVariation ) => {\n\tdispatch( blocksStore ).addBlockStyles( blockName, styleVariation );\n};\n\n/**\n * Unregisters a block style variation for the given block.\n *\n * @param {string} blockName          Name of block (example: “core/latest-posts”).\n * @param {string} styleVariationName Name of class applied to the block.\n *\n * @example\n * ```js\n * import { __ } from '@wordpress/i18n';\n * import { unregisterBlockStyle } from '@wordpress/blocks';\n * import { Button } from '@wordpress/components';\n *\n * const ExampleComponent = () => {\n *     return (\n *     <Button\n *         onClick={ () => {\n *             unregisterBlockStyle( 'core/quote', 'plain' );\n *         } }\n *     >\n *         { __( 'Remove the \"Plain\" block style for core/quote' ) }\n *     </Button>\n *     );\n * };\n * ```\n */\nexport const unregisterBlockStyle = ( blockName, styleVariationName ) => {\n\tdispatch( blocksStore ).removeBlockStyles( blockName, styleVariationName );\n};\n\n/**\n * Returns an array with the variations of a given block type.\n * Ignored from documentation as the recommended usage is via useSelect from @wordpress/data.\n *\n * @ignore\n *\n * @param {string}                blockName Name of block (example: “core/columns”).\n * @param {WPBlockVariationScope} [scope]   Block variation scope name.\n *\n * @return {(WPBlockVariation[]|void)} Block variations.\n */\nexport const getBlockVariations = ( blockName, scope ) => {\n\treturn select( blocksStore ).getBlockVariations( blockName, scope );\n};\n\n/**\n * Registers a new block variation for the given block type.\n *\n * For more information on block variations see [the official documentation ](/docs/reference-guides/block-api/block-variations.md)\n *\n * @param {string}           blockName Name of the block (example: “core/columns”).\n * @param {WPBlockVariation} variation Object describing a block variation.\n *\n * @example\n * ```js\n * import { __ } from '@wordpress/i18n';\n * import { registerBlockVariation } from '@wordpress/blocks';\n * import { Button } from '@wordpress/components';\n *\n * const ExampleComponent = () => {\n *     return (\n *         <Button\n *             onClick={ () => {\n *                 registerBlockVariation( 'core/embed', {\n *                     name: 'custom',\n *                     title: __( 'My Custom Embed' ),\n *                     attributes: { providerNameSlug: 'custom' },\n *                 } );\n *             } }\n *          >\n *              __( 'Add a custom variation for core/embed' ) }\n *         </Button>\n *     );\n * };\n * ```\n */\nexport const registerBlockVariation = ( blockName, variation ) => {\n\tdispatch( blocksStore ).addBlockVariations( blockName, variation );\n};\n\n/**\n * Unregisters a block variation defined for the given block type.\n *\n * @param {string} blockName     Name of the block (example: “core/columns”).\n * @param {string} variationName Name of the variation defined for the block.\n *\n * @example\n * ```js\n * import { __ } from '@wordpress/i18n';\n * import { unregisterBlockVariation } from '@wordpress/blocks';\n * import { Button } from '@wordpress/components';\n *\n * const ExampleComponent = () => {\n *     return (\n *         <Button\n *             onClick={ () => {\n *                 unregisterBlockVariation( 'core/embed', 'youtube' );\n *             } }\n *         >\n *             { __( 'Remove the YouTube variation from core/embed' ) }\n *         </Button>\n *     );\n * };\n * ```\n */\nexport const unregisterBlockVariation = ( blockName, variationName ) => {\n\tdispatch( blocksStore ).removeBlockVariations( blockName, variationName );\n};\n"]}