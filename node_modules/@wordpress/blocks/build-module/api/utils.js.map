{"version":3,"sources":["@wordpress/blocks/src/api/utils.js"],"names":["every","reduce","colord","extend","namesPlugin","a11yPlugin","Component","isValidElement","__","sprintf","__unstableStripHTML","stripHTML","BLOCK_ICON_DEFAULT","getBlockType","getDefaultBlockName","createBlock","ICON_COLORS","isUnmodifiedDefaultBlock","block","defaultBlockName","name","newDefaultBlock","blockType","attributes","value","key","isValidIcon","icon","normalizeIconObject","src","colordBgColor","background","getColorContrast","iconColor","contrast","maxContrast","Math","max","map","foreground","find","shadowColor","alpha","toRgbString","normalizeBlockType","blockTypeOrName","getBlockLabel","context","__experimentalLabel","getLabel","title","label","getAccessibleBlockLabel","position","direction","hasPosition","undefined","hasLabel","__experimentalSanitizeBlockAttributes","Error","accumulator","schema","hasOwnProperty","default","indexOf","source","Array","isArray","__experimentalGetBlockAttributesNamesByRole","role","attributesNames","Object","keys","filter","attributeName","__experimentalRole","omit","object","fromEntries","entries","includes"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { every, reduce } from 'lodash';\nimport { colord, extend } from 'colord';\nimport namesPlugin from 'colord/plugins/names';\nimport a11yPlugin from 'colord/plugins/a11y';\n\n/**\n * WordPress dependencies\n */\nimport { Component, isValidElement } from '@wordpress/element';\nimport { __, sprintf } from '@wordpress/i18n';\nimport { __unstableStripHTML as stripHTML } from '@wordpress/dom';\n\n/**\n * Internal dependencies\n */\nimport { BLOCK_ICON_DEFAULT } from './constants';\nimport { getBlockType, getDefaultBlockName } from './registration';\nimport { createBlock } from './factory';\n\nextend( [ namesPlugin, a11yPlugin ] );\n\n/**\n * Array of icon colors containing a color to be used if the icon color\n * was not explicitly set but the icon background color was.\n *\n * @type {Object}\n */\nconst ICON_COLORS = [ '#191e23', '#f8f9f9' ];\n\n/**\n * Determines whether the block is a default block\n * and its attributes are equal to the default attributes\n * which means the block is unmodified.\n *\n * @param {WPBlock} block Block Object\n *\n * @return {boolean} Whether the block is an unmodified default block\n */\nexport function isUnmodifiedDefaultBlock( block ) {\n\tconst defaultBlockName = getDefaultBlockName();\n\tif ( block.name !== defaultBlockName ) {\n\t\treturn false;\n\t}\n\n\t// Cache a created default block if no cache exists or the default block\n\t// name changed.\n\tif (\n\t\t! isUnmodifiedDefaultBlock.block ||\n\t\tisUnmodifiedDefaultBlock.block.name !== defaultBlockName\n\t) {\n\t\tisUnmodifiedDefaultBlock.block = createBlock( defaultBlockName );\n\t}\n\n\tconst newDefaultBlock = isUnmodifiedDefaultBlock.block;\n\tconst blockType = getBlockType( defaultBlockName );\n\n\treturn every(\n\t\tblockType?.attributes,\n\t\t( value, key ) =>\n\t\t\tnewDefaultBlock.attributes[ key ] === block.attributes[ key ]\n\t);\n}\n\n/**\n * Function that checks if the parameter is a valid icon.\n *\n * @param {*} icon Parameter to be checked.\n *\n * @return {boolean} True if the parameter is a valid icon and false otherwise.\n */\n\nexport function isValidIcon( icon ) {\n\treturn (\n\t\t!! icon &&\n\t\t( typeof icon === 'string' ||\n\t\t\tisValidElement( icon ) ||\n\t\t\ttypeof icon === 'function' ||\n\t\t\ticon instanceof Component )\n\t);\n}\n\n/**\n * Function that receives an icon as set by the blocks during the registration\n * and returns a new icon object that is normalized so we can rely on just on possible icon structure\n * in the codebase.\n *\n * @param {WPBlockTypeIconRender} icon Render behavior of a block type icon;\n *                                     one of a Dashicon slug, an element, or a\n *                                     component.\n *\n * @return {WPBlockTypeIconDescriptor} Object describing the icon.\n */\nexport function normalizeIconObject( icon ) {\n\ticon = icon || BLOCK_ICON_DEFAULT;\n\tif ( isValidIcon( icon ) ) {\n\t\treturn { src: icon };\n\t}\n\n\tif ( 'background' in icon ) {\n\t\tconst colordBgColor = colord( icon.background );\n\t\tconst getColorContrast = ( iconColor ) =>\n\t\t\tcolordBgColor.contrast( iconColor );\n\t\tconst maxContrast = Math.max( ...ICON_COLORS.map( getColorContrast ) );\n\n\t\treturn {\n\t\t\t...icon,\n\t\t\tforeground: icon.foreground\n\t\t\t\t? icon.foreground\n\t\t\t\t: ICON_COLORS.find(\n\t\t\t\t\t\t( iconColor ) =>\n\t\t\t\t\t\t\tgetColorContrast( iconColor ) === maxContrast\n\t\t\t\t  ),\n\t\t\tshadowColor: colordBgColor.alpha( 0.3 ).toRgbString(),\n\t\t};\n\t}\n\n\treturn icon;\n}\n\n/**\n * Normalizes block type passed as param. When string is passed then\n * it converts it to the matching block type object.\n * It passes the original object otherwise.\n *\n * @param {string|Object} blockTypeOrName Block type or name.\n *\n * @return {?Object} Block type.\n */\nexport function normalizeBlockType( blockTypeOrName ) {\n\tif ( typeof blockTypeOrName === 'string' ) {\n\t\treturn getBlockType( blockTypeOrName );\n\t}\n\n\treturn blockTypeOrName;\n}\n\n/**\n * Get the label for the block, usually this is either the block title,\n * or the value of the block's `label` function when that's specified.\n *\n * @param {Object} blockType  The block type.\n * @param {Object} attributes The values of the block's attributes.\n * @param {Object} context    The intended use for the label.\n *\n * @return {string} The block label.\n */\nexport function getBlockLabel( blockType, attributes, context = 'visual' ) {\n\tconst { __experimentalLabel: getLabel, title } = blockType;\n\n\tconst label = getLabel && getLabel( attributes, { context } );\n\n\tif ( ! label ) {\n\t\treturn title;\n\t}\n\n\t// Strip any HTML (i.e. RichText formatting) before returning.\n\treturn stripHTML( label );\n}\n\n/**\n * Get a label for the block for use by screenreaders, this is more descriptive\n * than the visual label and includes the block title and the value of the\n * `getLabel` function if it's specified.\n *\n * @param {?Object} blockType              The block type.\n * @param {Object}  attributes             The values of the block's attributes.\n * @param {?number} position               The position of the block in the block list.\n * @param {string}  [direction='vertical'] The direction of the block layout.\n *\n * @return {string} The block label.\n */\nexport function getAccessibleBlockLabel(\n\tblockType,\n\tattributes,\n\tposition,\n\tdirection = 'vertical'\n) {\n\t// `title` is already localized, `label` is a user-supplied value.\n\tconst title = blockType?.title;\n\tconst label = blockType\n\t\t? getBlockLabel( blockType, attributes, 'accessibility' )\n\t\t: '';\n\tconst hasPosition = position !== undefined;\n\n\t// getBlockLabel returns the block title as a fallback when there's no label,\n\t// if it did return the title, this function needs to avoid adding the\n\t// title twice within the accessible label. Use this `hasLabel` boolean to\n\t// handle that.\n\tconst hasLabel = label && label !== title;\n\n\tif ( hasPosition && direction === 'vertical' ) {\n\t\tif ( hasLabel ) {\n\t\t\treturn sprintf(\n\t\t\t\t/* translators: accessibility text. 1: The block title. 2: The block row number. 3: The block label.. */\n\t\t\t\t__( '%1$s Block. Row %2$d. %3$s' ),\n\t\t\t\ttitle,\n\t\t\t\tposition,\n\t\t\t\tlabel\n\t\t\t);\n\t\t}\n\n\t\treturn sprintf(\n\t\t\t/* translators: accessibility text. 1: The block title. 2: The block row number. */\n\t\t\t__( '%1$s Block. Row %2$d' ),\n\t\t\ttitle,\n\t\t\tposition\n\t\t);\n\t} else if ( hasPosition && direction === 'horizontal' ) {\n\t\tif ( hasLabel ) {\n\t\t\treturn sprintf(\n\t\t\t\t/* translators: accessibility text. 1: The block title. 2: The block column number. 3: The block label.. */\n\t\t\t\t__( '%1$s Block. Column %2$d. %3$s' ),\n\t\t\t\ttitle,\n\t\t\t\tposition,\n\t\t\t\tlabel\n\t\t\t);\n\t\t}\n\n\t\treturn sprintf(\n\t\t\t/* translators: accessibility text. 1: The block title. 2: The block column number. */\n\t\t\t__( '%1$s Block. Column %2$d' ),\n\t\t\ttitle,\n\t\t\tposition\n\t\t);\n\t}\n\n\tif ( hasLabel ) {\n\t\treturn sprintf(\n\t\t\t/* translators: accessibility text. %1: The block title. %2: The block label. */\n\t\t\t__( '%1$s Block. %2$s' ),\n\t\t\ttitle,\n\t\t\tlabel\n\t\t);\n\t}\n\n\treturn sprintf(\n\t\t/* translators: accessibility text. %s: The block title. */\n\t\t__( '%s Block' ),\n\t\ttitle\n\t);\n}\n\n/**\n * Ensure attributes contains only values defined by block type, and merge\n * default values for missing attributes.\n *\n * @param {string} name       The block's name.\n * @param {Object} attributes The block's attributes.\n * @return {Object} The sanitized attributes.\n */\nexport function __experimentalSanitizeBlockAttributes( name, attributes ) {\n\t// Get the type definition associated with a registered block.\n\tconst blockType = getBlockType( name );\n\n\tif ( undefined === blockType ) {\n\t\tthrow new Error( `Block type '${ name }' is not registered.` );\n\t}\n\n\treturn reduce(\n\t\tblockType.attributes,\n\t\t( accumulator, schema, key ) => {\n\t\t\tconst value = attributes[ key ];\n\n\t\t\tif ( undefined !== value ) {\n\t\t\t\taccumulator[ key ] = value;\n\t\t\t} else if ( schema.hasOwnProperty( 'default' ) ) {\n\t\t\t\taccumulator[ key ] = schema.default;\n\t\t\t}\n\n\t\t\tif ( [ 'node', 'children' ].indexOf( schema.source ) !== -1 ) {\n\t\t\t\t// Ensure value passed is always an array, which we're expecting in\n\t\t\t\t// the RichText component to handle the deprecated value.\n\t\t\t\tif ( typeof accumulator[ key ] === 'string' ) {\n\t\t\t\t\taccumulator[ key ] = [ accumulator[ key ] ];\n\t\t\t\t} else if ( ! Array.isArray( accumulator[ key ] ) ) {\n\t\t\t\t\taccumulator[ key ] = [];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn accumulator;\n\t\t},\n\t\t{}\n\t);\n}\n\n/**\n * Filter block attributes by `role` and return their names.\n *\n * @param {string} name Block attribute's name.\n * @param {string} role The role of a block attribute.\n *\n * @return {string[]} The attribute names that have the provided role.\n */\nexport function __experimentalGetBlockAttributesNamesByRole( name, role ) {\n\tconst attributes = getBlockType( name )?.attributes;\n\tif ( ! attributes ) return [];\n\tconst attributesNames = Object.keys( attributes );\n\tif ( ! role ) return attributesNames;\n\treturn attributesNames.filter(\n\t\t( attributeName ) =>\n\t\t\tattributes[ attributeName ]?.__experimentalRole === role\n\t);\n}\n\n/**\n * Return a new object with the specified keys omitted.\n *\n * @param {Object} object Original object.\n * @param {Array}  keys   Keys to be omitted.\n *\n * @return {Object} Object with omitted keys.\n */\nexport function omit( object, keys ) {\n\treturn Object.fromEntries(\n\t\tObject.entries( object ).filter( ( [ key ] ) => ! keys.includes( key ) )\n\t);\n}\n"]}