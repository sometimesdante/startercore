{"version":3,"sources":["@wordpress/blocks/src/api/templates.js"],"names":["doBlocksMatchTemplate","blocks","template","length","every","index","name","innerBlocksTemplate","block","innerBlocks","synchronizeBlocksWithTemplate","map","attributes","blockType","isHTMLAttribute","attributeDefinition","source","isQueryAttribute","normalizeAttributes","schema","values","Object","fromEntries","entries","key","value","normalizeAttribute","definition","Array","isArray","subValues","query","normalizedAttributes","blockName","blockAttributes","undefined","originalName","originalContent","originalUndelimitedContent"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { renderToString } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport { convertLegacyBlockNameAndAttributes } from './parser/convert-legacy-block';\nimport { createBlock } from './factory';\nimport { getBlockType } from './registration';\n\n/**\n * Checks whether a list of blocks matches a template by comparing the block names.\n *\n * @param {Array} blocks   Block list.\n * @param {Array} template Block template.\n *\n * @return {boolean} Whether the list of blocks matches a templates.\n */\nexport function doBlocksMatchTemplate( blocks = [], template = [] ) {\n\treturn (\n\t\tblocks.length === template.length &&\n\t\ttemplate.every( ( [ name, , innerBlocksTemplate ], index ) => {\n\t\t\tconst block = blocks[ index ];\n\t\t\treturn (\n\t\t\t\tname === block.name &&\n\t\t\t\tdoBlocksMatchTemplate( block.innerBlocks, innerBlocksTemplate )\n\t\t\t);\n\t\t} )\n\t);\n}\n\n/**\n * Synchronize a block list with a block template.\n *\n * Synchronizing a block list with a block template means that we loop over the blocks\n * keep the block as is if it matches the block at the same position in the template\n * (If it has the same name) and if doesn't match, we create a new block based on the template.\n * Extra blocks not present in the template are removed.\n *\n * @param {Array} blocks   Block list.\n * @param {Array} template Block template.\n *\n * @return {Array} Updated Block list.\n */\nexport function synchronizeBlocksWithTemplate( blocks = [], template ) {\n\t// If no template is provided, return blocks unmodified.\n\tif ( ! template ) {\n\t\treturn blocks;\n\t}\n\n\treturn template.map(\n\t\t( [ name, attributes, innerBlocksTemplate ], index ) => {\n\t\t\tconst block = blocks[ index ];\n\n\t\t\tif ( block && block.name === name ) {\n\t\t\t\tconst innerBlocks = synchronizeBlocksWithTemplate(\n\t\t\t\t\tblock.innerBlocks,\n\t\t\t\t\tinnerBlocksTemplate\n\t\t\t\t);\n\t\t\t\treturn { ...block, innerBlocks };\n\t\t\t}\n\n\t\t\t// To support old templates that were using the \"children\" format\n\t\t\t// for the attributes using \"html\" strings now, we normalize the template attributes\n\t\t\t// before creating the blocks.\n\n\t\t\tconst blockType = getBlockType( name );\n\t\t\tconst isHTMLAttribute = ( attributeDefinition ) =>\n\t\t\t\tattributeDefinition?.source === 'html';\n\t\t\tconst isQueryAttribute = ( attributeDefinition ) =>\n\t\t\t\tattributeDefinition?.source === 'query';\n\n\t\t\tconst normalizeAttributes = ( schema, values ) => {\n\t\t\t\tif ( ! values ) {\n\t\t\t\t\treturn {};\n\t\t\t\t}\n\n\t\t\t\treturn Object.fromEntries(\n\t\t\t\t\tObject.entries( values ).map( ( [ key, value ] ) => [\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tnormalizeAttribute( schema[ key ], value ),\n\t\t\t\t\t] )\n\t\t\t\t);\n\t\t\t};\n\t\t\tconst normalizeAttribute = ( definition, value ) => {\n\t\t\t\tif ( isHTMLAttribute( definition ) && Array.isArray( value ) ) {\n\t\t\t\t\t// Introduce a deprecated call at this point\n\t\t\t\t\t// When we're confident that \"children\" format should be removed from the templates.\n\n\t\t\t\t\treturn renderToString( value );\n\t\t\t\t}\n\n\t\t\t\tif ( isQueryAttribute( definition ) && value ) {\n\t\t\t\t\treturn value.map( ( subValues ) => {\n\t\t\t\t\t\treturn normalizeAttributes(\n\t\t\t\t\t\t\tdefinition.query,\n\t\t\t\t\t\t\tsubValues\n\t\t\t\t\t\t);\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\treturn value;\n\t\t\t};\n\n\t\t\tconst normalizedAttributes = normalizeAttributes(\n\t\t\t\tblockType?.attributes ?? {},\n\t\t\t\tattributes\n\t\t\t);\n\n\t\t\tlet [ blockName, blockAttributes ] =\n\t\t\t\tconvertLegacyBlockNameAndAttributes(\n\t\t\t\t\tname,\n\t\t\t\t\tnormalizedAttributes\n\t\t\t\t);\n\n\t\t\t// If a Block is undefined at this point, use the core/missing block as\n\t\t\t// a placeholder for a better user experience.\n\t\t\tif ( undefined === getBlockType( blockName ) ) {\n\t\t\t\tblockAttributes = {\n\t\t\t\t\toriginalName: name,\n\t\t\t\t\toriginalContent: '',\n\t\t\t\t\toriginalUndelimitedContent: '',\n\t\t\t\t};\n\t\t\t\tblockName = 'core/missing';\n\t\t\t}\n\n\t\t\treturn createBlock(\n\t\t\t\tblockName,\n\t\t\t\tblockAttributes,\n\t\t\t\tsynchronizeBlocksWithTemplate( [], innerBlocksTemplate )\n\t\t\t);\n\t\t}\n\t);\n}\n"]}