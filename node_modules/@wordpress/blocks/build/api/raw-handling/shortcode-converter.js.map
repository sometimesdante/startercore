{"version":3,"sources":["@wordpress/blocks/src/api/raw-handling/shortcode-converter.js"],"names":["castArray","maybeArray","Array","isArray","segmentHTMLToShortcodeBlock","HTML","lastIndex","excludedBlockNames","transformsFrom","transformation","transform","indexOf","blockName","type","tag","some","test","transformTags","transformTag","find","match","previousIndex","index","content","length","beforeHTML","substr","afterHTML","shortcode","includes","isMatch","attrs","blocks","concat","map","block","originalContent","name","attributes","Object","fromEntries","entries","filter","schema","key","blockType","transformationBlockType"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { regexp, next } from '@wordpress/shortcode';\n\n/**\n * Internal dependencies\n */\nimport { createBlock, getBlockTransforms, findTransform } from '../factory';\nimport { getBlockType } from '../registration';\nimport { getBlockAttributes } from '../parser/get-block-attributes';\nimport { applyBuiltInValidationFixes } from '../parser/apply-built-in-validation-fixes';\n\nconst castArray = ( maybeArray ) =>\n\tArray.isArray( maybeArray ) ? maybeArray : [ maybeArray ];\n\nfunction segmentHTMLToShortcodeBlock(\n\tHTML,\n\tlastIndex = 0,\n\texcludedBlockNames = []\n) {\n\t// Get all matches.\n\tconst transformsFrom = getBlockTransforms( 'from' );\n\n\tconst transformation = findTransform(\n\t\ttransformsFrom,\n\t\t( transform ) =>\n\t\t\texcludedBlockNames.indexOf( transform.blockName ) === -1 &&\n\t\t\ttransform.type === 'shortcode' &&\n\t\t\tcastArray( transform.tag ).some( ( tag ) =>\n\t\t\t\tregexp( tag ).test( HTML )\n\t\t\t)\n\t);\n\n\tif ( ! transformation ) {\n\t\treturn [ HTML ];\n\t}\n\n\tconst transformTags = castArray( transformation.tag );\n\tconst transformTag = transformTags.find( ( tag ) =>\n\t\tregexp( tag ).test( HTML )\n\t);\n\n\tlet match;\n\tconst previousIndex = lastIndex;\n\n\tif ( ( match = next( transformTag, HTML, lastIndex ) ) ) {\n\t\tlastIndex = match.index + match.content.length;\n\t\tconst beforeHTML = HTML.substr( 0, match.index );\n\t\tconst afterHTML = HTML.substr( lastIndex );\n\n\t\t// If the shortcode content does not contain HTML and the shortcode is\n\t\t// not on a new line (or in paragraph from Markdown converter),\n\t\t// consider the shortcode as inline text, and thus skip conversion for\n\t\t// this segment.\n\t\tif (\n\t\t\t! match.shortcode.content?.includes( '<' ) &&\n\t\t\t! (\n\t\t\t\t/(\\n|<p>)\\s*$/.test( beforeHTML ) &&\n\t\t\t\t/^\\s*(\\n|<\\/p>)/.test( afterHTML )\n\t\t\t)\n\t\t) {\n\t\t\treturn segmentHTMLToShortcodeBlock( HTML, lastIndex );\n\t\t}\n\n\t\t// If a transformation's `isMatch` predicate fails for the inbound\n\t\t// shortcode, try again by excluding the current block type.\n\t\t//\n\t\t// This is the only call to `segmentHTMLToShortcodeBlock` that should\n\t\t// ever carry over `excludedBlockNames`. Other calls in the module\n\t\t// should skip that argument as a way to reset the exclusion state, so\n\t\t// that one `isMatch` fail in an HTML fragment doesn't prevent any\n\t\t// valid matches in subsequent fragments.\n\t\tif (\n\t\t\ttransformation.isMatch &&\n\t\t\t! transformation.isMatch( match.shortcode.attrs )\n\t\t) {\n\t\t\treturn segmentHTMLToShortcodeBlock( HTML, previousIndex, [\n\t\t\t\t...excludedBlockNames,\n\t\t\t\ttransformation.blockName,\n\t\t\t] );\n\t\t}\n\n\t\tlet blocks = [];\n\t\tif ( typeof transformation.transform === 'function' ) {\n\t\t\t// Passing all of `match` as second argument is intentionally broad\n\t\t\t// but shouldn't be too relied upon.\n\t\t\t//\n\t\t\t// See: https://github.com/WordPress/gutenberg/pull/3610#discussion_r152546926\n\t\t\tblocks = [].concat(\n\t\t\t\ttransformation.transform( match.shortcode.attrs, match )\n\t\t\t);\n\n\t\t\t// Applying the built-in fixes can enhance the attributes with missing content like \"className\".\n\t\t\tblocks = blocks.map( ( block ) => {\n\t\t\t\tblock.originalContent = match.shortcode.content;\n\t\t\t\treturn applyBuiltInValidationFixes(\n\t\t\t\t\tblock,\n\t\t\t\t\tgetBlockType( block.name )\n\t\t\t\t);\n\t\t\t} );\n\t\t} else {\n\t\t\tconst attributes = Object.fromEntries(\n\t\t\t\tObject.entries( transformation.attributes )\n\t\t\t\t\t.filter( ( [ , schema ] ) => schema.shortcode )\n\t\t\t\t\t// Passing all of `match` as second argument is intentionally broad\n\t\t\t\t\t// but shouldn't be too relied upon.\n\t\t\t\t\t//\n\t\t\t\t\t// See: https://github.com/WordPress/gutenberg/pull/3610#discussion_r152546926\n\t\t\t\t\t.map( ( [ key, schema ] ) => [\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tschema.shortcode( match.shortcode.attrs, match ),\n\t\t\t\t\t] )\n\t\t\t);\n\n\t\t\tconst blockType = getBlockType( transformation.blockName );\n\t\t\tif ( ! blockType ) {\n\t\t\t\treturn [ HTML ];\n\t\t\t}\n\n\t\t\tconst transformationBlockType = {\n\t\t\t\t...blockType,\n\t\t\t\tattributes: transformation.attributes,\n\t\t\t};\n\n\t\t\tlet block = createBlock(\n\t\t\t\ttransformation.blockName,\n\t\t\t\tgetBlockAttributes(\n\t\t\t\t\ttransformationBlockType,\n\t\t\t\t\tmatch.shortcode.content,\n\t\t\t\t\tattributes\n\t\t\t\t)\n\t\t\t);\n\n\t\t\t// Applying the built-in fixes can enhance the attributes with missing content like \"className\".\n\t\t\tblock.originalContent = match.shortcode.content;\n\t\t\tblock = applyBuiltInValidationFixes(\n\t\t\t\tblock,\n\t\t\t\ttransformationBlockType\n\t\t\t);\n\n\t\t\tblocks = [ block ];\n\t\t}\n\n\t\treturn [\n\t\t\t...segmentHTMLToShortcodeBlock( beforeHTML ),\n\t\t\t...blocks,\n\t\t\t...segmentHTMLToShortcodeBlock( afterHTML ),\n\t\t];\n\t}\n\n\treturn [ HTML ];\n}\n\nexport default segmentHTMLToShortcodeBlock;\n"]}